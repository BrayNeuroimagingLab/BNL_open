
"""

This program takes EEG connectomes (generated by source localization 8)
and calculates various fingerprinting measures for each participant
e.g., self-stability, mean-similarity, individualization, self-stability by task, similarity by age, etc etc

It spits out a ton of useful numbers, and a ton of useless numbers, lol

"""



import numpy as np
import pandas as pd
import os
from scipy.stats import pearsonr

from scipy import stats


#folder with all the EEG connectomes
dir_start = '/Users/ivy/Desktop/Graff_EEG_stuff/precise_KIDS_final/prepro1/'

#folder where outputs are saved
savesumdir = '/Users/ivy/Desktop/Graff_EEG_stuff/precise_KIDS_final/results_august2024/x_fingerprint/'



#which parcellation to use
parc = 'aparc'


#which frequency bands and FC measures to use
fbands = [[8.0,13.0],[13.0,30.0],[2.5,45.0]]
conmethods = ['wpli','imcoh','coh','plv','pli','ciplv','psi','ecpwo','ecso']


#which file(s) do you want to look at?
families = list(range(2,27))
participant_ages = ['C','P']
sessions = [1,2,3,4,'4x']
tasks = ['DORA','YT','RX']


saveoutputs = True
#replace files that already exist? Or ignore them
replacer = False



conband = []
agegroup = []

list_stability_mean = []
list_stability_best = []
list_stabilitysameses_mean = []
list_stabilitysameses_best = []
list_similarity_mean = []
list_similarity_best = []

list_simsameage_mean = []
list_simsameage_best = []
list_simdiffage_mean = []
list_simdiffage_best = []
list_famsim_mean = []
list_famsim_best = []

list_personmatch = []
list_numbetterlist = []

list_personmatchsameses = []
list_numbetterlistsameses = []

list_personmatch_best = []
list_numbetterlist_best = []

list_personmatchsameses_best = []
list_numbetterlistsameses_best = [] 

list_personmatch_avg = []
list_numbetterlist_avg = []

list_personmatchsameses_avg = []
list_numbetterlistsameses_avg = []   


list_personmatch_sameage = []
list_numbetterlist_sameage = []
list_personmatch_diffage = []
list_numbetterlist_diffage = []

list_personmatch_fam = []
list_numbetterlist_fam = []
list_matchfamtonon_best = []
list_numbetterlist_famtonon_best = []


list_matchfamtonon = []
list_numbetterlist_famtonon = []
list_matchfamtonon_da = []
list_numbetterlist_famtonon_da = []

listselfcomps = []
listothercomps =[]

list_personmatch_dora = []
list_personmatch_yt = []
list_personmatch_rx = []
list_numbetterlist_dora = []
list_numbetterlist_yt = []
list_numbetterlist_rx = []

list_personmatch_dty = []
list_personmatch_dtr = []
list_personmatch_rty = []
list_numbetterlist_dty = []
list_numbetterlist_dtr = []
list_numbetterlist_rty = []

list_stability_dtd = []
list_stability_dtr = []
list_stability_dty = []
list_stability_rtr = []
list_stability_yty = []
list_stability_rty = []

list_similarity_dtd = []
list_similarity_dtr = []
list_similarity_dty = []
list_similarity_rtr = []
list_similarity_yty = []
list_similarity_rty = []


list_personmatch_sametask = []
list_numbetterlist_sametask = []
list_personmatch_difftask = []
list_numbetterlist_difftask = []
list_stability_sametask = []
list_similarity_sametask = []
list_stability_difftask = []
list_similarity_difftask = []


list_personmatch_doravdora = []
list_personmatch_ytvyt = []
list_personmatch_rxvrx = []
list_personmatch_sametaskvsametask = []
list_personmatch_difftaskvdifftask = []
list_numbetterlist_doravdora = []
list_numbetterlist_ytvyt = []
list_numbetterlist_rxvrx = []
list_numbetterlist_sametaskvsametask = []
list_numbetterlist_difftaskvdifftask = []






for fband in fbands:
    fbandstr = str(fband[0]) + '-' + str(fband[1])
    for conmethod in conmethods:    
        
        fmin = fband[0]
        fmax = fband[1]

        logname = savesumdir + 'fingerprint_' + conmethod + '_' + fbandstr + '.csv'

        if os.path.isfile(logname) == False or replacer == True:

            FCallvec = []
            familylist = []
            pagelist = []
            sessionlist = []
            generictasklist = []
            specifictasklist = []
            fbandlist = []
            conmethodlist = []
            labellist = []
            
            persname = []
    
            for family in families:
                strnum = str(family)
                if len(strnum) == 1:
                    strnum = '0' + strnum
                strfam = 'sub-19730' + strnum
            
                for page in participant_ages:
                    strper = strfam + str(page)
                    personfolder = dir_start + strper + '/'
                    
                    for session in sessions:
                        input_data_folder = personfolder + 'ses-' + str(session) + '/eeg/'
                        connectome_folder = personfolder + 'ses-' + str(session) + '/connectomes_0624/' + parc + '/'
                        
                        for task in tasks:
                            
                            raw_data_file_sub = strper + '_ses-' + str(session) + '_task-' + task
                            if os.path.exists(connectome_folder):
                                prefixed = [filename for filename in os.listdir(connectome_folder) if filename.startswith(raw_data_file_sub)]  
                                
                                if len(prefixed) == 0:
                                    print("There are no files matching the name " + raw_data_file_sub)
                                else:
                                
                                    filetosaveprefix = prefixed[0].split('_')
                                    specifictask = filetosaveprefix[2].split('-')[1]
                                    filetosaveprefix = strper + '_ses-' + str(session) + '_' + filetosaveprefix[2]
                                
                                
                                     
            
                                    badparclog = connectome_folder + filetosaveprefix + '_' + parc + '_errorlog.txt'
                                    
                                    if os.path.isfile(badparclog):
                                        print("This file exists " + badparclog)
                                    
            
                                    saveconnectome = connectome_folder + filetosaveprefix + '_' + parc + '_' + conmethod + '_' + str(fmin) + 'Hz-' + str(fmax) + 'Hz_fulle.csv'
                                                                
                                    if os.path.isfile(saveconnectome):
                                        print("Loading " + saveconnectome) 
                                        
                                        parceldata1 = pd.read_csv(saveconnectome,index_col=0)
                                        
                                        FCm = np.squeeze(np.asarray(parceldata1))
                                        FCm = np.arctanh(FCm)
                                    
                                        vec = []
                                        for ii in range(1, FCm.shape[0]):
                                            for jj in range(ii):
                                                vec.append(FCm[ii, jj])
                                        
                                        FCallvec.append(np.asarray(vec))
                                        familylist.append(strnum)
                                        pagelist.append(page)
                                        sessionlist.append(session)
                                        generictasklist.append(task)
                                        specifictasklist.append(specifictask)
                                        fbandlist.append(fbandstr)
                                        conmethodlist.append(conmethod)         
                                        if session == 1 or session == 2 or session == 3 or session == 4:
                                            labellist.append(strnum+page+'0'+str(session)+specifictask)
                                        else:
                                            labellist.append(strnum+page+str(session)+specifictask)
                                    
                                        persname.append(strnum+page)
    
    
    
            personlist = list(set(persname))
            personlist.sort()
            
    
            corrlol = []
            
            
    
            print("")
            print("")
            for i in range(len(labellist)):
                
                FC1vec = FCallvec[i]
                
                #FC1vec = [abs(x) for x in FC1vec]
                
                label1 = labellist[i]
                
                corrlist = []
                #labeltolist = []
                
                #family1 = familylist[i]
                #page1 = pagelist[i]
                #session1 = sessionlist[i]
                generictask1 = generictasklist[i]
                specifictask1 = specifictasklist[i]
            
                if specifictask1 == 'DORA1':
                    print("Analyzing comparisions " + label1)      
            
                
                for l in range(len(labellist)):
                    if i > l:  
                    
                        FC2vec = FCallvec[l]   
                        
                        #FC2vec = [abs(x) for x in FC2vec]
                        
                        #label2 = labellist[l]
            
                        #family2 = familylist[l]
                        #page2 = pagelist[l]
                        #session2 = sessionlist[l]
                        #generictask2 = generictasklist[l]
                        #specifictask2 = specifictasklist[l]
            
                        try:
                            corre = pearsonr(FC1vec,FC2vec)
                        except:
                            
                            nas = np.logical_or(np.logical_or(np.isinf(FC1vec),np.isinf(FC2vec)),np.logical_or(np.isnan(FC1vec),np.isnan(FC2vec)))
                            #bad = sum(nas)
                            corre = pearsonr(FC1vec[~nas],FC2vec[~nas])  
            
            
                        #nas = np.logical_or(np.logical_or(np.isinf(FC1vec),np.isinf(FC2vec)),np.logical_or(np.isnan(FC1vec),np.isnan(FC2vec)))
                        #corre = pearsonr(FC1vec[~nas], FC2vec[~nas])
            
                        #corre = pearsonr(FC1vec,FC2vec)
                        finalcorr = np.arctanh(corre[0])  
            
                            
                    else:
                        finalcorr = 0   
    
                    corrlist.append(finalcorr) 
    
                corrlol.append(corrlist)
                
            
            corrdf = pd.DataFrame(data=corrlol)
            corrdf = corrdf + corrdf.T
            
            corrdf.columns = labellist
            corrdf.index = labellist
            
            
            personmatch = []
            agelist = []
            
            selfcomplist = []
            othercomplist = []
        
            stability_mean = []
            stability_best = []
            stabilitysameses_mean = []
            stabilitysameses_best = []
            similarity_mean = []
            similarity_best = []
            
            stability_std = []
            stabilitysameses_std = []
            similarity_std = []
            famsim_std = []
            simsameage_std = []
            simdiffage_std = []
            
            
            famsim_mean = []
            famsim_best = []
            simsameage_mean = []
            simsameage_best = []
            simdiffage_mean = []
            simdiffage_best = []
            
            
            numbetterlist = []
            
            personmatchsameses = []
            numbetterlistsameses = []
            
            personmatch_best = []
            numbetterlist_best = []
            
            personmatchsameses_best = []
            numbetterlistsameses_best = [] 
            
            personmatch_sameage = []
            numbetterlist_sameage = []     
            personmatch_diffage = []
            numbetterlist_diffage = []
            
            personmatch_fam = []
            numbetterlist_fam = []
            matchfamtonon_best = []
            numbetterlist_famtonon_best = []
            
            matchfamtonon = []
            numbetterlist_famtonon = []
            matchfamtonon_da = []
            numbetterlist_famtonon_da = []
            
            
            
            
            personmatch_dora = []
            personmatch_yt = []
            personmatch_rx = []
            numbetterlist_dora = []
            numbetterlist_yt = []
            numbetterlist_rx = []
            
            
            personmatch_dty = []
            personmatch_dtr = []
            personmatch_rty = []
            numbetterlist_dty = []
            numbetterlist_dtr = []
            numbetterlist_rty = []

            stability_dtd = []
            stability_dtr = []
            stability_dty = []
            stability_rtr = []
            stability_yty = []
            stability_rty = []

            similarity_dtd = []
            similarity_dtr = []
            similarity_dty = []
            similarity_rtr = []
            similarity_yty = []
            similarity_rty = []
            
            personmatch_sametask = []
            personmatch_difftask = []
            numbetterlist_sametask = []
            numbetterlist_difftask = []
            stability_sametask = []
            stability_difftask = []
            similarity_sametask = []
            similarity_difftask = []


            personmatch_doravdora = []
            personmatch_ytvyt = []
            personmatch_rxvrx = []
            personmatch_sametaskvsametask = []
            personmatch_difftaskvdifftask = []
            numbetterlist_doravdora = []
            numbetterlist_ytvyt = []
            numbetterlist_rxvrx = []
            numbetterlist_sametaskvsametask = []
            numbetterlist_difftaskvdifftask = []
            
    
            #personmatch_avg = []
            #numbetterlist_avg = []
            #personmatchsameses_avg = []
            #numbetterlistsameses_avg = []         
            #personmatchsameses_sameage = []
            #numbetterlistsameses_sameage = []
            #personmatchsameses_diffage = []
            #numbetterlistsameses_diffage = []   
            
            
            
            print("")
            print("Fingerprint matching!")
            print("")
            for person1 in personlist:
                print("Checking for " + person1)
                
                age1 = person1[-1]
                fam1 = person1[:2]
                
                if fam1 == '05':
                    fam1check = '30'
                elif fam1 == '06':
                    fam1check = '30'
                elif fam1 == '07':
                    fam1check = '31'
                elif fam1 == '10':
                    fam1check = '31'
                else:
                    fam1check = fam1
                
                personcolumns1 = [col for col in labellist if person1 in col]
                personcolumns_dora = [col for col in personcolumns1 if 'DORA' in col]
                personcolumns_yt = [col for col in personcolumns1 if 'YT' in col]
                personcolumns_rx = [col for col in personcolumns1 if 'RX' in col]
                
                
                if person1 == '05C' or person1 == '06C':
                    famcolumns = [col for col in labellist if '05P' in col or '06P' in col]
                    nonfamall = [col for col in labellist if '05C' not in col and '05P' not in col and '06C' not in col and '06P' not in col]
    
                elif person1 == '07C' or person1 == '10C':
                    famcolumns = [col for col in labellist if '07P' in col or '10P' in col]
                    nonfamall = [col for col in labellist if '07C' not in col and '07P' not in col and '10C' not in col and '10P' not in col]  
                    
                elif person1 == '05P' or person1 == '06P':
                    famcolumns = [col for col in labellist if '05C' in col or '06C' in col]
                    nonfamall = [col for col in labellist if '05C' not in col and '06C' not in col and person1 not in col]   
                    
                elif person1 == '07P' or person1 == '10P':
                    famcolumns = [col for col in labellist if '07C' in col or '10C' in col]
                    nonfamall = [col for col in labellist if '07C' not in col and '10C' not in col and person1 not in col]               
      
                else:
                    famcolumns = [col for col in labellist if (fam1 + 'C' in col or fam1 + 'P' in col) and person1 not in col]
                    nonfamall = [col for col in labellist if fam1 + 'C' not in col and fam1 + 'P' not in col]
      
                nonfamsameage = [col for col in nonfamall if age1 in col]
                nonfamdiffage = [col for col in nonfamall if age1 not in col]
        
                famcolumns_peeps = list(set([col[:3] for col in famcolumns]))
                nonfamall_peeps = list(set([col[:3] for col in nonfamall]))
                nonfamsameage_peeps = list(set([col[:3] for col in nonfamsameage]))
                nonfamdiffage_peeps = list(set([col[:3] for col in nonfamdiffage]))
        
                famcolumns_peeps.sort()
                nonfamall_peeps.sort()
                nonfamsameage_peeps.sort()
                nonfamdiffage_peeps.sort()
        
                print("Fam columns are " + str(famcolumns_peeps))
                #print("Nonfamall: " + str(nonfamall_peeps))
                print("Nonfam same age: " + str(nonfamsameage_peeps))
                print("Non fam diff age: " + str(nonfamdiffage_peeps))
                #print("")
    
            
    
                selfdf = corrdf[personcolumns1].loc[personcolumns1]
                othersdf = corrdf[personcolumns1].loc[nonfamall]
                
                selftofamdf = corrdf[personcolumns1].loc[famcolumns]
                others_sameagedf = corrdf[personcolumns1].loc[nonfamsameage]
                others_diffagedf = corrdf[personcolumns1].loc[nonfamdiffage]
                                
                selfcomparisonssameses = []
                selfcomparisons = []
                selfcomparisonsdora = []
                selfcomparisonsyt = []
                selfcomparisonsrx = []
                othercomparisons = []
                
                othercomparisonsdtd = []
                othercomparisonsyty = []
                othercomparisonsrtr = []
                othercomparisonsdty = []
                othercomparisonsdtr = []
                othercomparisonsrty = []
                
                
                famcomparisons = []
                sameagecomparisons = []
                diffagecomparisons = []
                
                
                selfcomparisonsdty = []
                selfcomparisonsdtr = []
                selfcomparisonsrty = []
                
                selfcomparisonssametask = []
                selfcomparisonsdifftask = []
                othercomparisonssametask = []
                othercomparisonsdifftask = []
                
                
                
                for coli in range(len(personcolumns1)):
                    col1 = personcolumns1[coli]
                    
                    colses1 = col1[:5]
                    coltask1 = col1[5:7]
                    coltask1specific = col1[5:]
                    
                    if colses1[-2:] == '4x':
                        colses1check = '04'
                    else:
                        colses1check = colses1[-2:]
                    
                    
                    for colj in range(len(personcolumns1)):
                        if colj > coli:
                            col2 = personcolumns1[colj]
                            
                            colses2 = col2[:5]
                            coltask2 = col2[5:7]
                            coltask2specific = col2[5:]
    
                            if colses2[-2:] == '4x':
                                colses2check = '04'
                            else:
                                colses2check = colses2[-2:]
    
                            corre = selfdf[col1].loc[col2]  
                            if colses1check == colses2check:
                                selfcomparisonssameses.append(corre)
                            else:    
                                selfcomparisons.append(corre)
                                
                                if coltask1 == coltask2 == 'DO':
                                    selfcomparisonsdora.append(corre)
                                    selfcomparisonssametask.append(corre)
                                if coltask1 == coltask2 == 'RX':
                                    selfcomparisonsrx.append(corre)
                                    selfcomparisonssametask.append(corre)
                                if coltask1 == coltask2 == 'YT':
                                    selfcomparisonsyt.append(corre)    
                                    selfcomparisonssametask.append(corre)
                                    
                                if (coltask1 == 'DO' and coltask2 == 'RX') or (coltask1 == 'RX' and coltask2 == 'DO'):
                                    selfcomparisonsdtr.append(corre)
                                    selfcomparisonsdifftask.append(corre)

                                if (coltask1 == 'DO' and coltask2 == 'YT') or (coltask1 == 'YT' and coltask2 == 'DO'):
                                    selfcomparisonsdty.append(corre)     
                                    selfcomparisonsdifftask.append(corre)
                                    
                                if (coltask1 == 'RX' and coltask2 == 'YT') or (coltask1 == 'YT' and coltask2 == 'RX'):
                                    selfcomparisonsrty.append(corre)
                                    selfcomparisonsdifftask.append(corre)
                                       
     
                            
                            
                for coli in range(len(personcolumns1)):
                    col1 = personcolumns1[coli]
                    colses1 = col1[:5]
                    coltask1 = col1[5:7]
                    coltask1specific = col1[5:]                    
                    
                    for colj in range(len(nonfamall)):
                        col2 = nonfamall[colj]
                        colses2 = col2[:5]
                        coltask2 = col2[5:7]
                        coltask2specific = col2[5:]
                        
                        corre = othersdf[col1].loc[col2]  
                        othercomparisons.append(corre) 


                        if coltask1 == coltask2 == 'DO':
                            othercomparisonsdtd.append(corre)
                            othercomparisonssametask.append(corre)
                        if coltask1 == coltask2 == 'RX':
                            othercomparisonsrtr.append(corre)
                            othercomparisonssametask.append(corre)
                        if coltask1 == coltask2 == 'YT':
                            othercomparisonsyty.append(corre)    
                            othercomparisonssametask.append(corre)
                            
                        if (coltask1 == 'DO' and coltask2 == 'RX') or (coltask1 == 'RX' and coltask2 == 'DO'):
                            othercomparisonsdtr.append(corre)
                            othercomparisonsdifftask.append(corre)

                        if (coltask1 == 'DO' and coltask2 == 'YT') or (coltask1 == 'YT' and coltask2 == 'DO'):
                            othercomparisonsdty.append(corre)   
                            othercomparisonsdifftask.append(corre)
                            
                        if (coltask1 == 'RX' and coltask2 == 'YT') or (coltask1 == 'YT' and coltask2 == 'RX'):
                            othercomparisonsrty.append(corre)  
                            othercomparisonsdifftask.append(corre)
                
            
                
                        
                for coli in range(len(personcolumns1)):
                    col1 = personcolumns1[coli]
                    for colj in range(len(nonfamsameage)):
                        col2 = nonfamsameage[colj]
                        
                        corre = others_sameagedf[col1].loc[col2]  
                        sameagecomparisons.append(corre)  
                        
                        
                for coli in range(len(personcolumns1)):
                    col1 = personcolumns1[coli]
                    for colj in range(len(nonfamdiffage)):
                        col2 = nonfamdiffage[colj]
                        
                        corre = others_diffagedf[col1].loc[col2]  
                        diffagecomparisons.append(corre)     
                        
    
                for coli in range(len(personcolumns1)):
                    col1 = personcolumns1[coli]
                    for colj in range(len(famcolumns)):
                        col2 = famcolumns[colj]
                        
                        corre = selftofamdf[col1].loc[col2]  
                        famcomparisons.append(corre)                      

                print("Self comparisons = " + str(len(selfcomparisons)) + ', other comparisons = ' + str(len(othercomparisons)))
                print('')
                
                selfcomplist.append(len(selfcomparisons))
                othercomplist.append(len(othercomparisons))
                        
    
                agelist.append(age1)
                compval = 0
                numbetter = []
                for val in selfcomparisons:
                    comp = sum(othercomparisons > val)
                    if comp == 0:
                        #if none of the other comparisons are higher than this self comparison, then it's a match
                        compval = compval + 1
                    numbetter.append(stats.percentileofscore(othercomparisons, val))
                adjcompval = compval / len(selfcomparisons)
                avgnumbetter = np.mean(numbetter)
                personmatch.append(adjcompval)
                numbetterlist.append(avgnumbetter)
    
    
                compval = 0
                numbetter = []
                for val in selfcomparisonssameses:
                    comp = sum(othercomparisons > val)
                    if comp == 0:
                        #if none of the other comparisons are higher than this self comparison, then it's a match
                        compval = compval + 1
                    numbetter.append(stats.percentileofscore(othercomparisons, val))
                adjcompval = compval / len(selfcomparisonssameses)
                avgnumbetter = np.mean(numbetter)
                personmatchsameses.append(adjcompval)
                numbetterlistsameses.append(avgnumbetter)
                
                
                comp = sum(othercomparisons > max(selfcomparisons))
                if comp == 0:
                    personmatch_best.append(1)
                else:
                    personmatch_best.append(0)
                avgnumbetter = stats.percentileofscore(othercomparisons, max(selfcomparisons))
                numbetterlist_best.append(avgnumbetter)    
                
                
                comp = sum(othercomparisons > max(selfcomparisonssameses))
                if comp == 0:
                    personmatchsameses_best.append(1)
                else:
                    personmatchsameses_best.append(0)
                avgnumbetter = stats.percentileofscore(othercomparisons, max(selfcomparisonssameses))
                numbetterlistsameses_best.append(avgnumbetter)               
    
    
                compval = 0
                numbetter = []
                for val in selfcomparisons:
                    comp = sum(sameagecomparisons > val)
                    if comp == 0:
                        #if none of the other comparisons are higher than this self comparison, then it's a match
                        compval = compval + 1
                    numbetter.append(stats.percentileofscore(sameagecomparisons, val))
                adjcompval = compval / len(selfcomparisons)
                avgnumbetter = np.mean(numbetter)
                personmatch_sameage.append(adjcompval)
                numbetterlist_sameage.append(avgnumbetter)
    
    
                compval = 0
                numbetter = []
                for val in selfcomparisons:
                    comp = sum(diffagecomparisons > val)
                    if comp == 0:
                        #if none of the other comparisons are higher than this self comparison, then it's a match
                        compval = compval + 1
                    numbetter.append(stats.percentileofscore(diffagecomparisons, val))
                adjcompval = compval / len(selfcomparisons)
                avgnumbetter = np.mean(numbetter)
                personmatch_diffage.append(adjcompval)
                numbetterlist_diffage.append(avgnumbetter) 
    
                """
                compval = 0
                numbetter = []
                for val in selfcomparisons:
                    comp = sum(famcomparisons > val)
                    if comp == 0:
                        #if none of the other comparisons are higher than this self comparison, then it's a match
                        compval = compval + 1
                    numbetter.append(stats.percentileofscore(famcomparisons, val))
                adjcompval = compval / len(selfcomparisons)
                avgnumbetter = np.mean(numbetter)
                personmatch_fam.append(adjcompval)
                numbetterlist_fam.append(avgnumbetter) 
                
                
                comp = sum(othercomparisons > max(famcomparisons))
                if comp == 0:
                    matchfamtonon_best.append(1)
                else:
                    matchfamtonon_best.append(0)
                avgnumbetter = stats.percentileofscore(othercomparisons, max(famcomparisons))
                numbetterlist_famtonon_best.append(avgnumbetter)  
                """
                
                


                
                compval = 0
                numbetter = []
                for val in famcomparisons:
                    comp = sum(diffagecomparisons > val)
                    if comp == 0:
                        #if none of the other comparisons are higher than this self comparison, then it's a match
                        compval = compval + 1
                    numbetter.append(stats.percentileofscore(diffagecomparisons, val))
                adjcompval = compval / len(famcomparisons)
                avgnumbetter = np.mean(numbetter)
                matchfamtonon_da.append(adjcompval)
                numbetterlist_famtonon_da.append(avgnumbetter) 
                
                
                compval = 0
                numbetter = []
                for val in famcomparisons:
                    comp = sum(othercomparisons > val)
                    if comp == 0:
                        #if none of the other comparisons are higher than this self comparison, then it's a match
                        compval = compval + 1
                    numbetter.append(stats.percentileofscore(othercomparisons, val))
                adjcompval = compval / len(famcomparisons)
                avgnumbetter = np.mean(numbetter)
                matchfamtonon.append(adjcompval)
                numbetterlist_famtonon.append(avgnumbetter)                 
                
                
                
            

                compval = 0
                numbetter = []
                for val in selfcomparisonsdora:
                    comp = sum(othercomparisons > val)
                    if comp == 0:
                        #if none of the other comparisons are higher than this self comparison, then it's a match
                        compval = compval + 1
                    numbetter.append(stats.percentileofscore(othercomparisons, val))
                adjcompval = compval / len(selfcomparisonsdora)
                avgnumbetter = np.mean(numbetter)
                personmatch_dora.append(adjcompval)
                numbetterlist_dora.append(avgnumbetter)

                compval = 0
                numbetter = []
                for val in selfcomparisonsyt:
                    comp = sum(othercomparisons > val)
                    if comp == 0:
                        #if none of the other comparisons are higher than this self comparison, then it's a match
                        compval = compval + 1
                    numbetter.append(stats.percentileofscore(othercomparisons, val))
                adjcompval = compval / len(selfcomparisonsyt)
                avgnumbetter = np.mean(numbetter)
                personmatch_yt.append(adjcompval)
                numbetterlist_yt.append(avgnumbetter)
                
                compval = 0
                numbetter = []
                for val in selfcomparisonsrx:
                    comp = sum(othercomparisons > val)
                    if comp == 0:
                        #if none of the other comparisons are higher than this self comparison, then it's a match
                        compval = compval + 1
                    numbetter.append(stats.percentileofscore(othercomparisons, val))
                adjcompval = compval / len(selfcomparisonsrx)
                avgnumbetter = np.mean(numbetter)
                personmatch_rx.append(adjcompval)
                numbetterlist_rx.append(avgnumbetter)
                


                compval = 0
                numbetter = []
                for val in selfcomparisonsdty:
                    comp = sum(othercomparisons > val)
                    if comp == 0:
                        #if none of the other comparisons are higher than this self comparison, then it's a match
                        compval = compval + 1
                    numbetter.append(stats.percentileofscore(othercomparisons, val))
                adjcompval = compval / len(selfcomparisonsdty)
                avgnumbetter = np.mean(numbetter)
                personmatch_dty.append(adjcompval)
                numbetterlist_dty.append(avgnumbetter)                


                compval = 0
                numbetter = []
                for val in selfcomparisonsdtr:
                    comp = sum(othercomparisons > val)
                    if comp == 0:
                        #if none of the other comparisons are higher than this self comparison, then it's a match
                        compval = compval + 1
                    numbetter.append(stats.percentileofscore(othercomparisons, val))
                adjcompval = compval / len(selfcomparisonsdtr)
                avgnumbetter = np.mean(numbetter)
                personmatch_dtr.append(adjcompval)
                numbetterlist_dtr.append(avgnumbetter)                   
                
                
                compval = 0
                numbetter = []
                for val in selfcomparisonsrty:
                    comp = sum(othercomparisons > val)
                    if comp == 0:
                        #if none of the other comparisons are higher than this self comparison, then it's a match
                        compval = compval + 1
                    numbetter.append(stats.percentileofscore(othercomparisons, val))
                adjcompval = compval / len(selfcomparisonsrty)
                avgnumbetter = np.mean(numbetter)
                personmatch_rty.append(adjcompval)
                numbetterlist_rty.append(avgnumbetter)   
                

                compval = 0
                numbetter = []
                for val in selfcomparisonssametask:
                    comp = sum(othercomparisons > val)
                    if comp == 0:
                        #if none of the other comparisons are higher than this self comparison, then it's a match
                        compval = compval + 1
                    numbetter.append(stats.percentileofscore(othercomparisons, val))
                adjcompval = compval / len(selfcomparisonssametask)
                avgnumbetter = np.mean(numbetter)
                personmatch_sametask.append(adjcompval)
                numbetterlist_sametask.append(avgnumbetter) 

                compval = 0
                numbetter = []
                for val in selfcomparisonsdifftask:
                    comp = sum(othercomparisons > val)
                    if comp == 0:
                        #if none of the other comparisons are higher than this self comparison, then it's a match
                        compval = compval + 1
                    numbetter.append(stats.percentileofscore(othercomparisons, val))
                adjcompval = compval / len(selfcomparisonsdifftask)
                avgnumbetter = np.mean(numbetter)
                personmatch_difftask.append(adjcompval)
                numbetterlist_difftask.append(avgnumbetter)                 
                


                compval = 0
                numbetter = []
                for val in selfcomparisonsdora:
                    comp = sum(othercomparisonsdtd > val)
                    if comp == 0:
                        #if none of the other comparisons are higher than this self comparison, then it's a match
                        compval = compval + 1
                    numbetter.append(stats.percentileofscore(othercomparisonsdtd, val))
                adjcompval = compval / len(selfcomparisonsdora)
                avgnumbetter = np.mean(numbetter)
                personmatch_doravdora.append(adjcompval)
                numbetterlist_doravdora.append(avgnumbetter)

                compval = 0
                numbetter = []
                for val in selfcomparisonsyt:
                    comp = sum(othercomparisonsyty > val)
                    if comp == 0:
                        #if none of the other comparisons are higher than this self comparison, then it's a match
                        compval = compval + 1
                    numbetter.append(stats.percentileofscore(othercomparisonsyty, val))
                adjcompval = compval / len(selfcomparisonsyt)
                avgnumbetter = np.mean(numbetter)
                personmatch_ytvyt.append(adjcompval)
                numbetterlist_ytvyt.append(avgnumbetter)

                compval = 0
                numbetter = []
                for val in selfcomparisonsrx:
                    comp = sum(othercomparisonsrtr > val)
                    if comp == 0:
                        #if none of the other comparisons are higher than this self comparison, then it's a match
                        compval = compval + 1
                    numbetter.append(stats.percentileofscore(othercomparisonsrtr, val))
                adjcompval = compval / len(selfcomparisonsrx)
                avgnumbetter = np.mean(numbetter)
                personmatch_rxvrx.append(adjcompval)
                numbetterlist_rxvrx.append(avgnumbetter)

                compval = 0
                numbetter = []
                for val in selfcomparisonssametask:
                    comp = sum(othercomparisonssametask > val)
                    if comp == 0:
                        #if none of the other comparisons are higher than this self comparison, then it's a match
                        compval = compval + 1
                    numbetter.append(stats.percentileofscore(othercomparisonssametask, val))
                adjcompval = compval / len(selfcomparisonssametask)
                avgnumbetter = np.mean(numbetter)
                personmatch_sametaskvsametask.append(adjcompval)
                numbetterlist_sametaskvsametask.append(avgnumbetter)                
                
                compval = 0
                numbetter = []
                for val in selfcomparisonsdifftask:
                    comp = sum(othercomparisonsdifftask > val)
                    if comp == 0:
                        #if none of the other comparisons are higher than this self comparison, then it's a match
                        compval = compval + 1
                    numbetter.append(stats.percentileofscore(othercomparisonsdifftask, val))
                adjcompval = compval / len(selfcomparisonsdifftask)
                avgnumbetter = np.mean(numbetter)
                personmatch_difftaskvdifftask.append(adjcompval)
                numbetterlist_difftaskvdifftask.append(avgnumbetter)                  
                
                   
    
                """
                comp = sum(othercomparisons > np.mean(selfcomparisons))
                if comp == 0:
                    personmatch_avg.append(1)
                else:
                    personmatch_avg.append(0)
                avgnumbetter = stats.percentileofscore(othercomparisons, np.mean(selfcomparisons))
                numbetterlist_avg.append(avgnumbetter)    
                
                
                comp = sum(othercomparisons > np.mean(selfcomparisonssameses))
                if comp == 0:
                    personmatchsameses_avg.append(1)
                else:
                    personmatchsameses_avg.append(0)
                avgnumbetter = stats.percentileofscore(othercomparisons, np.mean(selfcomparisonssameses))
                numbetterlistsameses_avg.append(avgnumbetter)    
                """
            
                stability_mean.append(np.mean(selfcomparisons))
                stability_best.append(np.max(selfcomparisons))
                stabilitysameses_mean.append(np.mean(selfcomparisonssameses))
                stabilitysameses_best.append(np.max(selfcomparisonssameses))
                similarity_mean.append(np.mean(othercomparisons))
                similarity_best.append(np.max(othercomparisons))

                stability_dtd.append(np.mean(selfcomparisonsdora))
                stability_dtr.append(np.mean(selfcomparisonsdtr))
                stability_dty.append(np.mean(selfcomparisonsdty))
                stability_rtr.append(np.mean(selfcomparisonsrx))
                stability_rty.append(np.mean(selfcomparisonsrty))
                stability_yty.append(np.mean(selfcomparisonsyt))
                
                stability_sametask.append(np.mean(selfcomparisonssametask))
                stability_difftask.append(np.mean(selfcomparisonsdifftask))
                
                similarity_dtd.append(np.mean(othercomparisonsdtd))
                similarity_dtr.append(np.mean(othercomparisonsdtr))
                similarity_dty.append(np.mean(othercomparisonsdty))
                similarity_rtr.append(np.mean(othercomparisonsrtr))
                similarity_rty.append(np.mean(othercomparisonsrty))
                similarity_yty.append(np.mean(othercomparisonsyty))

                similarity_sametask.append(np.mean(othercomparisonssametask))
                similarity_difftask.append(np.mean(othercomparisonsdifftask))

                
                famsim_mean.append(np.mean(famcomparisons))
                famsim_best.append(np.max(famcomparisons))
                simsameage_mean.append(np.mean(sameagecomparisons))
                simsameage_best.append(np.max(sameagecomparisons))
                simdiffage_mean.append(np.mean(diffagecomparisons))
                simdiffage_best.append(np.max(diffagecomparisons))       
                
                stability_std.append(np.std(selfcomparisons))
                stabilitysameses_std.append(np.std(selfcomparisonssameses))
                similarity_std.append(np.std(othercomparisons))
                famsim_std.append(np.std(famcomparisons))
                simsameage_std.append(np.std(sameagecomparisons))
                simdiffage_std.append(np.std(diffagecomparisons))
                
    
                    
            #print("")
            resultdf = pd.DataFrame({'person':personlist,'age':agelist,
                                     'selfcomps':selfcomplist,'othercomps':othercomplist,
                                     'match':personmatch,'percentile':numbetterlist,'match_sameses':personmatchsameses,'percentile_sameses':numbetterlistsameses,
                                     'match_best':personmatch_best,'percentile_best':numbetterlist_best,'match_sameses_best':personmatchsameses_best,'percentile_sameses_best':numbetterlistsameses_best,
                                     'match_sameage':personmatch_sameage,'percentile_sameage':numbetterlist_sameage,'match_diffage':personmatch_diffage,'percentile_diffage':numbetterlist_diffage,
                                     #'match_fam':personmatch_fam,'percentile_fam':numbetterlist_fam,
                                     #'match_famtonon_best':matchfamtonon_best,'percentile_famtonon_best':numbetterlist_famtonon_best,
                                     'match_famtonon':matchfamtonon,'percentile_famtonon':numbetterlist_famtonon,
                                     'match_famtonon_da':matchfamtonon_da,'percentile_famtonon_da':numbetterlist_famtonon_da,
                                     
                                    
                                     'match_dora':personmatch_dora,'percentile_dora':numbetterlist_dora,
                                     'match_yt':personmatch_yt,'percentile_yt':numbetterlist_yt,
                                     'match_rx':personmatch_rx,'percentile_rx':numbetterlist_rx,
                                     
                                     'match_dtr':personmatch_dtr,'percentile_dtr':numbetterlist_dtr,
                                     'match_dty':personmatch_dty,'percentile_dty':numbetterlist_dty,
                                     'match_rty':personmatch_rty,'percentile_rty':numbetterlist_rty,
                                     
                                     'match_sametask':personmatch_sametask,'percentile_sametask':numbetterlist_sametask,
                                     'match_difftask':personmatch_difftask,'percentile_difftask':numbetterlist_difftask,
                                     
                                     
                                     'match_dvsd':personmatch_doravdora,
                                     'match_rvsr':personmatch_rxvrx,
                                     'match_yvsy':personmatch_ytvyt,
                                     'match_stvsst':personmatch_sametaskvsametask,
                                     'match_dtvsdt':personmatch_difftaskvdifftask,  
                                     'percentile_dvsd':numbetterlist_doravdora,
                                     'percentile_rvsr':numbetterlist_rxvrx,
                                     'percentile_yvsy':numbetterlist_ytvyt,
                                     'percentile_stvsst':numbetterlist_sametaskvsametask,
                                     'percentile_dtvsdt':numbetterlist_difftaskvdifftask,  
                                     
                                     
                                     
                                     'stab_dtd':stability_dtd,'sim_dtd':similarity_dtd,
                                     'stab_yty':stability_yty,'sim_yty':similarity_yty,
                                     'stab_rtr':stability_rtr,'sim_rtr':similarity_rtr,
                                     'stab_dtr':stability_dtr,'sim_dtr':similarity_dtr,
                                     'stab_dty':stability_dty,'sim_dty':similarity_dty,
                                     'stab_rty':stability_rty,'sim_rty':similarity_rty,
                                     'stab_sametask':stability_sametask,'sim_sametask':similarity_sametask,
                                     'stab_difftask':stability_difftask,'sim_difftask':similarity_difftask,
                                     
                                     
                                     
                                     #'match_avg':personmatch_avg,'percentile_avg':numbetterlist_avg,'match_sameses_avg':personmatchsameses_avg,'percentile_sameses_avg':numbetterlistsameses_avg,            
                                     'stab_avg':stability_mean,'stab_best':stability_best,'stab_sameses_avg':stabilitysameses_mean,'stab_sameses_best':stabilitysameses_best,'sim_avg':similarity_mean,'sim_best':similarity_best,
                                     'simsameage_avg':simsameage_mean,'simsameage_best':simsameage_best,'simdiffage_avg':simdiffage_mean,'simdiffage_best':simdiffage_best,
                                     'fam_avg':famsim_mean,'fam_best':famsim_best,
                                     'stab_std':stability_std,'stab_sameses_std':stabilitysameses_std,
                                     'sim_std':similarity_std,'fam_std':famsim_std,'simsameage_std':simsameage_std,'simdiffage_std':simdiffage_std,
                                     
                                     })
    

    
            #print(resultdf)
            
            if saveoutputs:
                resultdf.to_csv(logname)
            
        if os.path.isfile(logname):
            resultdf = pd.read_csv(logname,index_col=0)
        
            cresultdf = resultdf[resultdf['age'] == 'C'].copy()
            presultdf = resultdf[resultdf['age'] == 'P'].copy()
            allresultdf = resultdf.copy()
            subdfs = [allresultdf,cresultdf,presultdf]
            ageindf = ['all','C','P']
            
            for subn in range(3):
                subresultdf = subdfs[subn]
                agegroup.append(ageindf[subn])
    
                avg_personmatch = np.mean(subresultdf['match'])
                avg_numbetterlist = np.mean(subresultdf['percentile'])
                
                avg_personmatchsameses = np.mean(subresultdf['match_sameses'])
                avg_numbetterlistsameses = np.mean(subresultdf['percentile_sameses'])
                
                avg_personmatch_best = np.mean(subresultdf['match_best'])
                avg_numbetterlist_best = np.mean(subresultdf['percentile_best'])
                
                avg_personmatchsameses_best = np.mean(subresultdf['match_sameses_best'])
                avg_numbetterlistsameses_best = np.mean(subresultdf['percentile_sameses_best'])
                        
                #avg_personmatch_avg = np.mean(personmatch_avg)
                #avg_numbetterlist_avg = np.mean(numbetterlist_avg)
                #avg_personmatchsameses_avg = np.mean(personmatchsameses_avg)
                #avg_numbetterlistsameses_avg = np.mean(numbetterlistsameses_avg) 
         
            
                avg_personmatch_sameage = np.mean(subresultdf['match_sameage'])
                avg_numbetterlist_sameage = np.mean(subresultdf['percentile_sameage'])
                avg_personmatch_diffage = np.mean(subresultdf['match_diffage'])
                avg_numbetterlist_diffage = np.mean(subresultdf['percentile_diffage'])
                
                #avg_personmatch_fam = np.mean(subresultdf['match_fam'])
                #avg_numbetterlist_fam = np.mean(subresultdf['percentile_fam'])
                
                #avg_matchfamtonon_best = np.mean(subresultdf['match_famtonon_best'])
                #avg_numbetterlist_famtonon_best = np.mean(subresultdf['percentile_famtonon_best'])
                
                avg_personmatch_dora = np.mean(subresultdf['match_dora'])
                avg_personmatch_yt = np.mean(subresultdf['match_yt'])
                avg_personmatch_rx = np.mean(subresultdf['match_rx'])
                avg_numbetterlist_dora = np.mean(subresultdf['percentile_dora'])
                avg_numbetterlist_yt = np.mean(subresultdf['percentile_yt'])
                avg_numbetterlist_rx = np.mean(subresultdf['percentile_rx'])
                

                avg_personmatch_dtr = np.mean(subresultdf['match_dtr'])
                avg_personmatch_dty = np.mean(subresultdf['match_dty'])
                avg_personmatch_rty = np.mean(subresultdf['match_rty'])
                avg_numbetterlist_dtr = np.mean(subresultdf['percentile_dtr'])
                avg_numbetterlist_dty = np.mean(subresultdf['percentile_dty'])
                avg_numbetterlist_rty = np.mean(subresultdf['percentile_rty'])
                
                avg_personmatch_sametask = np.mean(subresultdf['match_sametask'])
                avg_personmatch_difftask = np.mean(subresultdf['match_difftask'])
                avg_numbetterlist_sametask = np.mean(subresultdf['percentile_sametask'])
                avg_numbetterlist_difftask = np.mean(subresultdf['percentile_difftask'])
                
                avg_stability_dtd = np.mean(subresultdf['stab_dtd'])
                avg_similarity_dtd = np.mean(subresultdf['sim_dtd'])
                avg_stability_dtr = np.mean(subresultdf['stab_dtr'])
                avg_similarity_dtr = np.mean(subresultdf['sim_dtr'])
                avg_stability_dty = np.mean(subresultdf['stab_dty'])
                avg_similarity_dty = np.mean(subresultdf['sim_dty']) 
                
                avg_stability_yty = np.mean(subresultdf['stab_yty'])
                avg_similarity_yty = np.mean(subresultdf['sim_yty'])
                avg_stability_rty = np.mean(subresultdf['stab_rty'])
                avg_similarity_rty = np.mean(subresultdf['sim_rty'])
                avg_stability_rtr = np.mean(subresultdf['stab_rtr'])
                avg_similarity_rtr = np.mean(subresultdf['sim_rtr'])
                
                avg_stability_sametask = np.mean(subresultdf['stab_sametask'])
                avg_stability_difftask = np.mean(subresultdf['stab_difftask'])
                avg_similarity_sametask = np.mean(subresultdf['sim_sametask'])
                avg_similarity_difftask = np.mean(subresultdf['sim_difftask'])
            
            
                avg_stability_mean = np.mean(subresultdf['stab_avg'])
                avg_stability_best = np.mean(subresultdf['stab_best'])
                avg_stabilitysameses_mean = np.mean(subresultdf['stab_sameses_avg'])
                avg_stabilitysameses_best = np.mean(subresultdf['stab_sameses_best'])
                avg_similarity_mean = np.mean(subresultdf['sim_avg'])
                avg_similarity_best = np.mean(subresultdf['sim_best'])
                        
                avg_simsameage_mean = np.mean(subresultdf['simsameage_avg'])
                avg_simsameage_best = np.mean(subresultdf['simsameage_best'])
                avg_simdiffage_mean = np.mean(subresultdf['simdiffage_avg'])
                avg_simdiffage_best = np.mean(subresultdf['simdiffage_best'])
                avg_famsim_mean = np.mean(subresultdf['fam_avg'])
                avg_famsim_best = np.mean(subresultdf['fam_best']) 
    
        
                avg_matchfamtonon = np.mean(subresultdf['match_famtonon'])
                avg_matchfamtonon_da = np.mean(subresultdf['match_famtonon_da'])
                avg_numbetterlist_famtonon = np.mean(subresultdf['percentile_famtonon'])
                avg_numbetterlist_famtonon_da = np.mean(subresultdf['percentile_famtonon_da'])
                
                

                avg_personmatch_doravdora = np.mean(subresultdf['match_dvsd'])
                avg_personmatch_ytvyt = np.mean(subresultdf['match_yvsy'])
                avg_personmatch_rxvrx = np.mean(subresultdf['match_rvsr'])
                avg_personmatch_sametaskvsametask = np.mean(subresultdf['match_stvsst'])
                avg_personmatch_difftaskvdifftask = np.mean(subresultdf['match_dtvsdt'])
                avg_numbetterlist_doravdora = np.mean(subresultdf['percentile_dvsd'])
                avg_numbetterlist_ytvyt = np.mean(subresultdf['percentile_yvsy'])
                avg_numbetterlist_rxvrx = np.mean(subresultdf['percentile_rvsr'])
                avg_numbetterlist_sametaskvsametask = np.mean(subresultdf['percentile_stvsst'])
                avg_numbetterlist_difftaskvdifftask = np.mean(subresultdf['percentile_dtvsdt'])               
            
                
        
        
     
                #print("")
                #print("For " + conmethod + '_' + fbandstr)
                #print("Average match rate is " + str(round(avg_personmatch,4)))
                #print("")

                selfcomplist = np.mean(subresultdf['selfcomps'])
                othercomplist = np.mean(subresultdf['othercomps'])
                listselfcomps.append(selfcomplist)
                listothercomps.append(othercomplist)

                
                
                conband.append(conmethod + '_' + fbandstr)
                list_stability_mean.append(avg_stability_mean)
                list_stability_best.append(avg_stability_best)
                list_stabilitysameses_mean.append(avg_stabilitysameses_mean)
                list_stabilitysameses_best.append(avg_stabilitysameses_best)
                list_similarity_mean.append(avg_similarity_mean)
                list_similarity_best.append(avg_similarity_best)
                
                list_personmatch.append(avg_personmatch)
                list_numbetterlist.append(avg_numbetterlist)
                
                list_personmatchsameses.append(avg_personmatchsameses)
                list_numbetterlistsameses.append(avg_numbetterlistsameses)
                
                list_personmatch_best.append(avg_personmatch_best)
                list_numbetterlist_best.append(avg_numbetterlist_best)
                
                list_personmatchsameses_best.append(avg_personmatchsameses_best)
                list_numbetterlistsameses_best.append(avg_numbetterlistsameses_best)
                
                
                list_personmatch_dora.append(avg_personmatch_dora)
                list_personmatch_yt.append(avg_personmatch_yt)
                list_personmatch_rx.append(avg_personmatch_rx)
                list_numbetterlist_dora.append(avg_numbetterlist_dora)
                list_numbetterlist_yt.append(avg_numbetterlist_yt)
                list_numbetterlist_rx.append(avg_numbetterlist_rx)                
        
        
                list_simsameage_mean.append(avg_simsameage_mean)
                list_simsameage_best.append(avg_simsameage_best)
                list_simdiffage_mean.append(avg_simdiffage_mean)
                list_simdiffage_best.append(avg_simdiffage_best)
                list_famsim_mean.append(avg_famsim_mean)
                list_famsim_best.append(avg_famsim_best)
                
                #list_personmatch_avg.append(avg_personmatch_avg)
                #list_numbetterlist_avg.append(avg_numbetterlist_avg)
        
                #list_personmatchsameses_avg.append(avg_personmatchsameses_avg)
                #list_numbetterlistsameses_avg.append(avg_numbetterlistsameses_avg) 
        
                list_personmatch_sameage.append(avg_personmatch_sameage)
                list_numbetterlist_sameage.append(avg_numbetterlist_sameage)
                list_personmatch_diffage.append(avg_personmatch_diffage)
                list_numbetterlist_diffage.append(avg_numbetterlist_diffage)
                #list_personmatch_fam.append(avg_personmatch_fam)
                #list_numbetterlist_fam.append(avg_numbetterlist_fam)
                #list_matchfamtonon_best.append(avg_matchfamtonon_best)
                #list_numbetterlist_famtonon_best.append(avg_numbetterlist_famtonon_best)
                
                list_matchfamtonon.append(avg_matchfamtonon)
                list_matchfamtonon_da.append(avg_matchfamtonon_da)
                list_numbetterlist_famtonon.append(avg_numbetterlist_famtonon)
                list_numbetterlist_famtonon_da.append(avg_numbetterlist_famtonon_da)
                

                list_personmatch_dty.append(avg_personmatch_dty)
                list_personmatch_dtr.append(avg_personmatch_dtr)
                list_personmatch_rty.append(avg_personmatch_rty)
                list_numbetterlist_dty.append(avg_numbetterlist_dty)
                list_numbetterlist_dtr.append(avg_numbetterlist_dtr)
                list_numbetterlist_rty.append(avg_numbetterlist_rty)
                
                list_stability_dtd.append(avg_stability_dtd)
                list_stability_dtr.append(avg_stability_dtr)
                list_stability_dty.append(avg_stability_dty)
                list_stability_rtr.append(avg_stability_rtr)
                list_stability_yty.append(avg_stability_yty)
                list_stability_rty.append(avg_stability_rty)
                
                list_similarity_dtd.append(avg_similarity_dtd)
                list_similarity_dtr.append(avg_similarity_dtr)
                list_similarity_dty.append(avg_similarity_dty)
                list_similarity_rtr.append(avg_similarity_rtr)
                list_similarity_yty.append(avg_similarity_yty)
                list_similarity_rty.append(avg_similarity_rty)
                
                
                list_personmatch_sametask.append(avg_personmatch_sametask)
                list_numbetterlist_sametask.append(avg_numbetterlist_sametask)
                list_personmatch_difftask.append(avg_personmatch_difftask)
                list_numbetterlist_difftask.append(avg_numbetterlist_difftask)
                list_stability_sametask.append(avg_stability_sametask)
                list_similarity_sametask.append(avg_similarity_sametask)
                list_stability_difftask.append(avg_stability_difftask)
                list_similarity_difftask.append(avg_similarity_difftask)

                
                list_personmatch_doravdora.append(avg_personmatch_doravdora)
                list_personmatch_ytvyt.append(avg_personmatch_ytvyt)
                list_personmatch_rxvrx.append(avg_personmatch_rxvrx)
                list_personmatch_sametaskvsametask.append(avg_personmatch_sametaskvsametask)
                list_personmatch_difftaskvdifftask.append(avg_personmatch_difftaskvdifftask)
                list_numbetterlist_doravdora.append(avg_numbetterlist_doravdora)
                list_numbetterlist_ytvyt.append(avg_numbetterlist_ytvyt)
                list_numbetterlist_rxvrx.append(avg_numbetterlist_rxvrx)
                list_numbetterlist_sametaskvsametask.append(avg_numbetterlist_sametaskvsametask)
                list_numbetterlist_difftaskvdifftask.append(avg_numbetterlist_difftaskvdifftask)


        
allresultdf = pd.DataFrame({'conmethod':conband,
                            'age':agegroup,
                            'match':list_personmatch,
                            'match_sameses':list_personmatchsameses,
                            'match_best':list_personmatch_best,
                            'match_sameses_best':list_personmatchsameses_best,
                            #'match_avg':list_personmatch_avg,
                            #'match_sameses_avg':list_personmatchsameses_avg,
                            'match_sameage':list_personmatch_sameage,
                            'match_diffage':list_personmatch_diffage,
                            #'match_vsfam':list_personmatch_fam,
                            #'match_famtonon_best':list_matchfamtonon_best,
                            'match_famtonon':list_matchfamtonon,
                            'match_famtonon_da':list_matchfamtonon_da,
                            
                            
                            'match_dora':list_personmatch_dora,
                            'match_rx':list_personmatch_rx,
                            'match_yt':list_personmatch_yt,
                            'match_dty':list_personmatch_dty,
                            'match_dtr':list_personmatch_dtr,
                            'match_rty':list_personmatch_rty, 
                            'match_sametask':list_personmatch_sametask,
                            'match_difftask':list_personmatch_difftask,
                            
                            })


lolnewdf = pd.DataFrame({'conmethod':conband,
                         'age':agegroup,
                        'match_dvsd':list_personmatch_doravdora,
                        'match_rvsr':list_personmatch_rxvrx,
                        'match_yvsy':list_personmatch_ytvyt,
                        'match_stvsst':list_personmatch_sametaskvsametask,
                        'match_dtvsdt':list_personmatch_difftaskvdifftask,  
                        
                        'percentile_dvsd':list_numbetterlist_doravdora,
                        'percentile_rvsr':list_numbetterlist_rxvrx,
                        'percentile_yvsy':list_numbetterlist_ytvyt,
                        'percentile_stvsst':list_numbetterlist_sametaskvsametask,
                        'percentile_dtvsdt':list_numbetterlist_difftaskvdifftask,                        
                         })


percresultdf = pd.DataFrame({'conmethod':conband,
                             'age':agegroup,
                             'percentile':list_numbetterlist,
                             'percentile_sameses':list_numbetterlistsameses,
                             'percentile_best':list_numbetterlist_best,
                             'percentile_sameses_best':list_numbetterlistsameses_best,
                             #'percentile_avg':list_numbetterlist_avg,
                             #'percentile_sameses_avg':list_numbetterlistsameses_avg,  
                             'percentile_sameage':list_numbetterlist_sameage,
                             'percentile_diffage':list_numbetterlist_diffage,
                             #'percentile_vsfam':list_numbetterlist_fam,
                             #'percentile_famtonon_best':list_numbetterlist_famtonon_best,
                             'percentile_famtonon':list_numbetterlist_famtonon,
                             'percentile_famtonon_da':list_numbetterlist_famtonon_da,
                             })


percresultdf_task = pd.DataFrame({'conmethod':conband,
                             'age':agegroup,                        
                             'percentile_dora':list_numbetterlist_dora,
                             'percentile_rx':list_numbetterlist_rx,
                             'percentile_yt':list_numbetterlist_yt,
                             'percentile_dty':list_numbetterlist_dty,
                             'percentile_dtr':list_numbetterlist_dtr,
                             'percentile_rty':list_numbetterlist_rty,
                             'percentile_sametask':list_numbetterlist_sametask,
                             'percentile_difftask':list_numbetterlist_difftask,
                             })


summarydf = pd.DataFrame({'conmethod':conband,    
                          'age':agegroup,
                          'stability':list_stability_mean,
                          'stability_sameses':list_stabilitysameses_mean,
                          'stability_best':list_stability_best,
                          'stability_sameses_best':list_stabilitysameses_best,
                          'similarity':list_similarity_mean,
                          'similarity_best':list_similarity_best,
                          'simsameage':list_simsameage_mean,
                          'simsameage_best':list_simsameage_best,
                          'simdiffage':list_simdiffage_mean,
                          'simdiffage_best':list_simdiffage_best,
                          'familysim':list_famsim_mean,
                          'familysim_best':list_famsim_best,
                          })


summarydf_task = pd.DataFrame({'conmethod':conband,    
                          'age':agegroup,
                          'stability_dtd':list_stability_dtd,
                          'stability_yty':list_stability_yty,
                          'stability_rtr':list_stability_rtr,
                          'stability_dtr':list_stability_dtr,
                          'stability_dty':list_stability_dty,
                          'stability_rty':list_stability_rty,
                          'stability_sametask':list_stability_sametask,
                          'stability_difftask':list_stability_difftask,
                          'simil_dtd':list_similarity_dtd,
                          'simil_yty':list_similarity_yty,
                          'simil_rtr':list_similarity_rtr,
                          'simil_dtr':list_similarity_dtr,
                          'simil_dty':list_similarity_dty,
                          'simil_rty':list_similarity_rty,    
                          'simil_sametask':list_similarity_sametask,
                          'simil_difftask':list_similarity_difftask,
                          })




conlist = []
bandlist = []
for conbanditem in conband:
    sp = conbanditem.split('_')
    conmet = sp[0]
    band = sp[1]
    conlist.append(conmet)
    bandlist.append(band)


allallresultdf = pd.DataFrame({'conmethod':conband,
                            'con':conlist,
                            'band':bandlist,
                            'age':agegroup,
                            'selfcompsavg':listselfcomps,
                            'othercompsavg':listothercomps,
                            'match':list_personmatch,
                            'match_sameses':list_personmatchsameses,
                            'match_best':list_personmatch_best,
                            'match_sameses_best':list_personmatchsameses_best,
                            #'match_avg':list_personmatch_avg,
                            #'match_sameses_avg':list_personmatchsameses_avg,
                            'match_sameage':list_personmatch_sameage,
                            'match_diffage':list_personmatch_diffage,
                            #'match_vsfam':list_personmatch_fam,
                            #'match_famtonon_best':list_matchfamtonon_best,
                            'match_famtonon':list_matchfamtonon,
                            'match_famtonon_da':list_matchfamtonon_da,
                            'match_dora':list_personmatch_dora,
                            'match_rx':list_personmatch_rx,
                            'match_yt':list_personmatch_yt,   
                            'match_dty':list_personmatch_dty,
                            'match_dtr':list_personmatch_dtr,
                            'match_rty':list_personmatch_rty,  
                            'match_sametask':list_personmatch_sametask,
                            'match_difftask':list_personmatch_difftask,
                            'percentile':list_numbetterlist,
                            'percentile_sameses':list_numbetterlistsameses,
                            'percentile_best':list_numbetterlist_best,
                            'percentile_sameses_best':list_numbetterlistsameses_best,
                            #'percentile_avg':list_numbetterlist_avg,
                            #'percentile_sameses_avg':list_numbetterlistsameses_avg,  
                            'percentile_sameage':list_numbetterlist_sameage,
                            'percentile_diffage':list_numbetterlist_diffage,
                            #'percentile_vsfam':list_numbetterlist_fam,
                            #'percentile_famtonon_best':list_numbetterlist_famtonon_best,
                            'percentile_famtonon':list_numbetterlist_famtonon,
                            'percentile_famtonon_da':list_numbetterlist_famtonon_da,
                            'percentile_dora':list_numbetterlist_dora,
                            'percentile_rx':list_numbetterlist_rx,
                            'percentile_yt':list_numbetterlist_yt,
                            'percentile_dty':list_numbetterlist_dty,
                            'percentile_dtr':list_numbetterlist_dtr,
                            'percentile_rty':list_numbetterlist_rty,
                            'percentile_sametask':list_numbetterlist_sametask,
                            'percentile_difftask':list_numbetterlist_difftask,
                            'stability':list_stability_mean,
                            'stability_sameses':list_stabilitysameses_mean,
                            'stability_best':list_stability_best,
                            'stability_sameses_best':list_stabilitysameses_best,
                            'similarity':list_similarity_mean,
                            'similarity_best':list_similarity_best,
                            'simsameage':list_simsameage_mean,
                            'simsameage_best':list_simsameage_best,
                            'simdiffage':list_simdiffage_mean,
                            'simdiffage_best':list_simdiffage_best,
                            'familysim':list_famsim_mean,
                            'familysim_best':list_famsim_best,  
                            'stability_dtd':list_stability_dtd,
                            'stability_yty':list_stability_yty,
                            'stability_rtr':list_stability_rtr,
                            'stability_dtr':list_stability_dtr,
                            'stability_dty':list_stability_dty,
                            'stability_rty':list_stability_rty,
                            'stability_sametask':list_stability_sametask,
                            'stability_difftask':list_stability_difftask,
                            'similarity_dtd':list_similarity_dtd,
                            'similarity_yty':list_similarity_yty,
                            'similarity_rtr':list_similarity_rtr,
                            'similarity_dtr':list_similarity_dtr,
                            'similarity_dty':list_similarity_dty,
                            'similarity_rty':list_similarity_rty,   
                            'similarity_sametask':list_similarity_sametask,
                            'similarity_difftask':list_similarity_difftask,
                            
                            'match_dvsd':list_personmatch_doravdora,
                            'match_rvsr':list_personmatch_rxvrx,
                            'match_yvsy':list_personmatch_ytvyt,
                            'match_stvsst':list_personmatch_sametaskvsametask,
                            'match_dtvsdt':list_personmatch_difftaskvdifftask,  
                            'percentile_dvsd':list_numbetterlist_doravdora,
                            'percentile_rvsr':list_numbetterlist_rxvrx,
                            'percentile_yvsy':list_numbetterlist_ytvyt,
                            'percentile_stvsst':list_numbetterlist_sametaskvsametask,
                            'percentile_dtvsdt':list_numbetterlist_difftaskvdifftask,      
                            })


print("")
print(allresultdf.to_string())
print(percresultdf.to_string())
print(percresultdf_task.to_string())
print(summarydf.to_string())
print(summarydf_task.to_string())
print(lolnewdf.to_string())


if saveoutputs:
    allallresultdf.to_csv(savesumdir + 'fingerprintsummary.csv')





















