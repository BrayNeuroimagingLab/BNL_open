#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""

This program takes combined EEG connectomes (generated by source localization 8 first2second2)
and calculates various fingerprinting measures for each participant
e.g., self-stability, mean-similarity, individualization, self-stability by task, similarity by age, etc etc

It spits out a ton of useful numbers, and a ton of useless numbers, lol

It does this for a number of different time subsets (how many epochs to include)


"""

import math

import numpy as np
import mne
import pandas as pd
import os
from mne.minimum_norm import make_inverse_operator, apply_inverse_epochs
from mne_connectivity import spectral_connectivity_epochs
from scipy.stats.stats import pearsonr

from scipy.stats import ttest_ind,ttest_rel

import matplotlib.pyplot as plt
import statsmodels.api as sm

from scipy import stats


#folder with all the participant folders and EEG outputs
dir_start = '/Users/ivy/Desktop/Graff_EEG_stuff/precise_KIDS_final/prepro1/'

#where to save outputs
savesumdir = '/Users/ivy/Desktop/Graff_EEG_stuff/precise_KIDS_final/xfingerprint_time_comb_12/'



saveoutputs = True
replacer = False



#which parcellation to use
#parc = 'aparc.a2009s'
parc = 'aparc'


#which frequency bands and FC measures to use
#fbands = [[8.0,13.0],[13.0,30.0],[2.5,45.0],[30.0,45.0],[4.0,8.0]]
#conmethods = ['imcoh','wpli','coh','pli','plv','psi']
fbands = [[8.0,13.0]]
conmethods = ['plv']



#which file(s) do you want to look at?
families = list(range(2,27))
participant_ages = ['C','P']



subsections = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,20,25,30,35,40,45,50,60,70,80,90,100,110,120,130,140,150]
#subsections = [1]








conband = []
agegroup = []
timesublist = []

list_stability_mean = []
list_stability_best = []
list_similarity_mean = []
list_similarity_best = []

list_simsameage_mean = []
list_simsameage_best = []
list_simdiffage_mean = []
list_simdiffage_best = []

list_personmatch = []
list_numbetterlist = []

list_personmatch_best = []
list_numbetterlist_best = []

list_personmatch_avg = []
list_numbetterlist_avg = []


list_personmatch_sameage = []
list_numbetterlist_sameage = []
list_personmatch_diffage = []
list_numbetterlist_diffage = []


listselfcomps = []
listothercomps =[]




for timesubx in subsections:
    timesub = int(timesubx*6)

    for fband in fbands:
        fbandstr = str(fband[0]) + '-' + str(fband[1])
        for conmethod in conmethods:    
            
            fmin = fband[0]
            fmax = fband[1]
    
            logname = savesumdir + 'fingerprint_' + conmethod + '_' + fbandstr + 'Hz_' + str(timesub) + 'e_combined.csv'
            print("Loading for " + conmethod + '_' + fbandstr + 'Hz_' + str(timesub) + 'e')
    
            if os.path.isfile(logname) == False or replacer == True:
    
                FCallvec = []
                familylist = []
                pagelist = []
                fbandlist = []
                conmethodlist = []
                halflist = []
                labellist = []
                
                persname = []
        
                for family in families:
                    strnum = str(family)
                    if len(strnum) == 1:
                        strnum = '0' + strnum
                    strfam = 'sub-19730' + strnum
                
                    for page in participant_ages:
                        strper = strfam + str(page)
                        personfolder = dir_start + strper + '/'
                        
                        filetoload1 = personfolder + 'connectomes_combined/' + parc + '/' + strper + '_combined_' + parc + '_' + conmethod + '_' + str(fmin) + 'Hz-' + str(fmax) + 'Hz_' + str(timesub) + 'e_firsthalf.csv'
                        filetoload2 = personfolder + 'connectomes_combined/' + parc + '/' + strper + '_combined_' + parc + '_' + conmethod + '_' + str(fmin) + 'Hz-' + str(fmax) + 'Hz_' + str(timesub) + 'e_secondhalf.csv'
                        
                        if not os.path.isfile(filetoload1):
                            xxy=3
                            #print("This does not exist " + filetoload1)
                        else:
                            #print("Hi")
                        
    
                            parceldata1 = pd.read_csv(filetoload1,index_col=0)
                            
                            FCm = np.squeeze(np.asarray(parceldata1))
                            FCm = np.arctanh(FCm)
                        
                            vec = []
                            for ii in range(1, FCm.shape[0]):
                                for jj in range(ii):
                                    vec.append(FCm[ii, jj])
                            
                            FCallvec.append(np.asarray(vec))
                            familylist.append(strnum)
                            pagelist.append(page)
                            fbandlist.append(fbandstr)
                            conmethodlist.append(conmethod)
                            halflist.append(1)
                            labellist.append(strnum+page+'1')
                            persname.append(strnum+page)
                            
    
                            parceldata2 = pd.read_csv(filetoload2,index_col=0)
                            
                            FCm = np.squeeze(np.asarray(parceldata2))
                            FCm = np.arctanh(FCm)
                        
                            vec = []
                            for ii in range(1, FCm.shape[0]):
                                for jj in range(ii):
                                    vec.append(FCm[ii, jj])
                            
                            FCallvec.append(np.asarray(vec))
                            familylist.append(strnum)
                            pagelist.append(page)
                            fbandlist.append(fbandstr)
                            conmethodlist.append(conmethod)
                            halflist.append(2)
                            labellist.append(strnum+page+'2')
                            persname.append(strnum+page)                        
                            
                            
            
        
                personlist = list(set(persname))
                personlist.sort()
                
        
                corrlol = []
                
                
        

                print("Analyzing comparisons")
                for i in range(len(labellist)):
                    
                    FC1vec = FCallvec[i]
                    
                    #FC1vec = [abs(x) for x in FC1vec]
                    
                    label1 = labellist[i]
                    
                    corrlist = []
                    
                    halfhere = halflist[i]
    
    
                
                    #if halfhere == 1:
                    #    print("Analyzing comparisions " + label1)      
                
                    
                    for l in range(len(labellist)):
                        if i > l:  
                        
                            FC2vec = FCallvec[l]   
                                        
                            try:
                                corre = pearsonr(FC1vec,FC2vec)
                            except:
                                
                                nas = np.logical_or(np.logical_or(np.isinf(FC1vec),np.isinf(FC2vec)),np.logical_or(np.isnan(FC1vec),np.isnan(FC2vec)))
                                #bad = sum(nas)
                                corre = pearsonr(FC1vec[~nas],FC2vec[~nas])  

                           
                            finalcorr = np.arctanh(corre[0])  

                
                                
                        else:
                            finalcorr = 0   
        
                        corrlist.append(finalcorr) 
        
                    corrlol.append(corrlist)
                    
                
                corrdf = pd.DataFrame(data=corrlol)
                corrdf = corrdf + corrdf.T
                
                corrdf.columns = labellist
                corrdf.index = labellist
                
                
                personmatch = []
                agelist = []
                
                selfcomplist = []
                othercomplist = []
            
                stability_mean = []
                stability_best = []
                similarity_mean = []
                similarity_best = []
                
                stability_std = []
                stabilitysameses_std = []
                similarity_std = []
                simsameage_std = []
                simdiffage_std = []
                
                simsameage_mean = []
                simsameage_best = []
                simdiffage_mean = []
                simdiffage_best = []
                
                numbetterlist = []
                
                personmatch_best = []
                numbetterlist_best = []
                
                personmatch_sameage = []
                numbetterlist_sameage = []     
                personmatch_diffage = []
                numbetterlist_diffage = []
                
    
                


                print("Fingerprint matching!")
                for person1 in personlist:
                    #print("Checking for " + person1)
                    
                    age1 = person1[-1]
                    fam1 = person1[:2]
                    
                    if fam1 == '05':
                        fam1check = '30'
                    elif fam1 == '06':
                        fam1check = '30'
                    elif fam1 == '07':
                        fam1check = '31'
                    elif fam1 == '10':
                        fam1check = '31'
                    else:
                        fam1check = fam1
                    
                    personcolumns1 = [col for col in labellist if person1 in col]
                    
                    
                    if person1 == '05C' or person1 == '06C':
                        famcolumns = [col for col in labellist if '05P' in col or '06P' in col]
                        nonfamall = [col for col in labellist if '05C' not in col and '05P' not in col and '06C' not in col and '06P' not in col]
        
                    elif person1 == '07C' or person1 == '10C':
                        famcolumns = [col for col in labellist if '07P' in col or '10P' in col]
                        nonfamall = [col for col in labellist if '07C' not in col and '07P' not in col and '10C' not in col and '10P' not in col]  
                        
                    elif person1 == '05P' or person1 == '06P':
                        famcolumns = [col for col in labellist if '05C' in col or '06C' in col]
                        nonfamall = [col for col in labellist if '05C' not in col and '06C' not in col and person1 not in col]   
                        
                    elif person1 == '07P' or person1 == '10P':
                        famcolumns = [col for col in labellist if '07C' in col or '10C' in col]
                        nonfamall = [col for col in labellist if '07C' not in col and '10C' not in col and person1 not in col]               
          
                    else:
                        famcolumns = [col for col in labellist if (fam1 + 'C' in col or fam1 + 'P' in col) and person1 not in col]
                        nonfamall = [col for col in labellist if fam1 + 'C' not in col and fam1 + 'P' not in col]
          
                    nonfamsameage = [col for col in nonfamall if age1 in col]
                    nonfamdiffage = [col for col in nonfamall if age1 not in col]
            
                    famcolumns_peeps = list(set([col[:3] for col in famcolumns]))
                    nonfamall_peeps = list(set([col[:3] for col in nonfamall]))
                    nonfamsameage_peeps = list(set([col[:3] for col in nonfamsameage]))
                    nonfamdiffage_peeps = list(set([col[:3] for col in nonfamdiffage]))
            
                    famcolumns_peeps.sort()
                    nonfamall_peeps.sort()
                    nonfamsameage_peeps.sort()
                    nonfamdiffage_peeps.sort()
            
                    #print("Fam columns are " + str(famcolumns_peeps))
                    #print("Nonfamall: " + str(nonfamall_peeps))
                    #print("Nonfam same age: " + str(nonfamsameage_peeps))
                    #print("Non fam diff age: " + str(nonfamdiffage_peeps))
                    #print("")
        
                
        
                    selfdf = corrdf[personcolumns1].loc[personcolumns1]
                    othersdf = corrdf[personcolumns1].loc[nonfamall]
                    
                    others_sameagedf = corrdf[personcolumns1].loc[nonfamsameage]
                    others_diffagedf = corrdf[personcolumns1].loc[nonfamdiffage]
                                    
                    selfcomparisons = []
                    othercomparisons = []
                                    
                    sameagecomparisons = []
                    diffagecomparisons = []
                                    
                    
    
                    for coli in range(len(personcolumns1)):
                        col1 = personcolumns1[coli]                    
                        
                        for colj in range(len(personcolumns1)):
                            if colj > coli:
                                col2 = personcolumns1[colj]
                                
                                corre = selfdf[col1].loc[col2]  
                                selfcomparisons.append(corre)
                                    
         
                                
                                
                    for coli in range(len(personcolumns1)):
                        col1 = personcolumns1[coli]               
                        
                        for colj in range(len(nonfamall)):
                            col2 = nonfamall[colj]
                            
                            corre = othersdf[col1].loc[col2]  
                            othercomparisons.append(corre) 
    
                
                    
                            
                    for coli in range(len(personcolumns1)):
                        col1 = personcolumns1[coli]
                        for colj in range(len(nonfamsameage)):
                            col2 = nonfamsameage[colj]
                            
                            corre = others_sameagedf[col1].loc[col2]  
                            sameagecomparisons.append(corre)  
                            
                            
                    for coli in range(len(personcolumns1)):
                        col1 = personcolumns1[coli]
                        for colj in range(len(nonfamdiffage)):
                            col2 = nonfamdiffage[colj]
                            
                            corre = others_diffagedf[col1].loc[col2]  
                            diffagecomparisons.append(corre)     
                            
                      
                    #print("Self comparisons = " + str(len(selfcomparisons)) + ', other comparisons = ' + str(len(othercomparisons)))
                    #print('')
                    
                    selfcomplist.append(len(selfcomparisons))
                    othercomplist.append(len(othercomparisons))
                            
        
                    agelist.append(age1)
                    compval = 0
                    numbetter = []
                    for val in selfcomparisons:
                        comp = sum(othercomparisons > val)
                        if comp == 0:
                            #if none of the other comparisons are higher than this self comparison, then it's a match
                            compval = compval + 1
                        numbetter.append(stats.percentileofscore(othercomparisons, val))
                    adjcompval = compval / len(selfcomparisons)
                    avgnumbetter = np.mean(numbetter)
                    personmatch.append(adjcompval)
                    numbetterlist.append(avgnumbetter)
                    
                    
                    #selfcomp = selfcomparisons[0]
                    #maxothercomp = max(othercomparisons)
                    #selfcompstr = str(round(selfcomp,2))
                    #maxothercompstr = str(round(maxothercomp,2))
                    #if selfcomp > maxothercomp:
                    #    match = 'match'
                    #else:
                    #    match = 'nomatch'
                    #print(person1,match,selfcompstr,maxothercompstr)
        
        
    
                    
                    
                    comp = sum(othercomparisons > max(selfcomparisons))
                    if comp == 0:
                        personmatch_best.append(1)
                    else:
                        personmatch_best.append(0)
                    avgnumbetter = stats.percentileofscore(othercomparisons, max(selfcomparisons))
                    numbetterlist_best.append(avgnumbetter)    
                    
                    
              
        
        
                    compval = 0
                    numbetter = []
                    for val in selfcomparisons:
                        comp = sum(sameagecomparisons > val)
                        if comp == 0:
                            #if none of the other comparisons are higher than this self comparison, then it's a match
                            compval = compval + 1
                        numbetter.append(stats.percentileofscore(sameagecomparisons, val))
                    adjcompval = compval / len(selfcomparisons)
                    avgnumbetter = np.mean(numbetter)
                    personmatch_sameage.append(adjcompval)
                    numbetterlist_sameage.append(avgnumbetter)
        
        
                    compval = 0
                    numbetter = []
                    for val in selfcomparisons:
                        comp = sum(diffagecomparisons > val)
                        if comp == 0:
                            #if none of the other comparisons are higher than this self comparison, then it's a match
                            compval = compval + 1
                        numbetter.append(stats.percentileofscore(diffagecomparisons, val))
                    adjcompval = compval / len(selfcomparisons)
                    avgnumbetter = np.mean(numbetter)
                    personmatch_diffage.append(adjcompval)
                    numbetterlist_diffage.append(avgnumbetter) 
        
              
        
    
    
                    stability_mean.append(np.mean(selfcomparisons))
                    stability_best.append(np.max(selfcomparisons))
                    similarity_mean.append(np.mean(othercomparisons))
                    similarity_best.append(np.max(othercomparisons))
    
                    simsameage_mean.append(np.mean(sameagecomparisons))
                    simsameage_best.append(np.max(sameagecomparisons))
                    simdiffage_mean.append(np.mean(diffagecomparisons))
                    simdiffage_best.append(np.max(diffagecomparisons))       
                    
                    stability_std.append(np.std(selfcomparisons))
                    similarity_std.append(np.std(othercomparisons))
                    simsameage_std.append(np.std(sameagecomparisons))
                    simdiffage_std.append(np.std(diffagecomparisons))
    
        
                      
                #print("")
                resultdf = pd.DataFrame({'person':personlist,'age':agelist,
                                         'selfcomps':selfcomplist,'othercomps':othercomplist,
                                         'match':personmatch,'percentile':numbetterlist,
                                         'match_best':personmatch_best,'percentile_best':numbetterlist_best,
                                         'match_sameage':personmatch_sameage,'percentile_sameage':numbetterlist_sameage,'match_diffage':personmatch_diffage,'percentile_diffage':numbetterlist_diffage,
    
                                         
                                         'stab_avg':stability_mean,'stab_best':stability_best,'sim_avg':similarity_mean,'sim_best':similarity_best,
                                         'simsameage_avg':simsameage_mean,'simsameage_best':simsameage_best,'simdiffage_avg':simdiffage_mean,'simdiffage_best':simdiffage_best,
                                         'stab_std':stability_std,
                                         'sim_std':similarity_std,'simsameage_std':simsameage_std,'simdiffage_std':simdiffage_std,
                                         
                                         })
        
    
        
                #print(resultdf)
                
                if saveoutputs:
                    resultdf.to_csv(logname)
                
            if os.path.isfile(logname):
                resultdf = pd.read_csv(logname,index_col=0)
            
                cresultdf = resultdf[resultdf['age'] == 'C'].copy()
                presultdf = resultdf[resultdf['age'] == 'P'].copy()
                allresultdf = resultdf.copy()
                subdfs = [allresultdf,cresultdf,presultdf]
                ageindf = ['all','C','P']
                
                for subn in range(3):
                    subresultdf = subdfs[subn]
                    agegroup.append(ageindf[subn])
        
                    avg_personmatch = np.mean(subresultdf['match'])
                    avg_numbetterlist = np.mean(subresultdf['percentile'])
                    
                    
                    avg_personmatch_best = np.mean(subresultdf['match_best'])
                    avg_numbetterlist_best = np.mean(subresultdf['percentile_best'])
                    
                    
                    avg_personmatch_sameage = np.mean(subresultdf['match_sameage'])
                    avg_numbetterlist_sameage = np.mean(subresultdf['percentile_sameage'])
                    avg_personmatch_diffage = np.mean(subresultdf['match_diffage'])
                    avg_numbetterlist_diffage = np.mean(subresultdf['percentile_diffage'])
                    
    
        
                    avg_stability_mean = np.mean(subresultdf['stab_avg'])
                    avg_stability_best = np.mean(subresultdf['stab_best'])
                    avg_similarity_mean = np.mean(subresultdf['sim_avg'])
                    avg_similarity_best = np.mean(subresultdf['sim_best'])
                            
                    avg_simsameage_mean = np.mean(subresultdf['simsameage_avg'])
                    avg_simsameage_best = np.mean(subresultdf['simsameage_best'])
                    avg_simdiffage_mean = np.mean(subresultdf['simdiffage_avg'])
                    avg_simdiffage_best = np.mean(subresultdf['simdiffage_best'])
    
    
                    
    
                    selfcomplist = np.mean(subresultdf['selfcomps'])
                    othercomplist = np.mean(subresultdf['othercomps'])
                    listselfcomps.append(selfcomplist)
                    listothercomps.append(othercomplist)
    
                    
                    
                    conband.append(conmethod + '_' + fbandstr)
                    timesublist.append(timesub)
                    list_stability_mean.append(avg_stability_mean)
                    list_stability_best.append(avg_stability_best)
                    list_similarity_mean.append(avg_similarity_mean)
                    list_similarity_best.append(avg_similarity_best)
                    
                    list_personmatch.append(avg_personmatch)
                    list_numbetterlist.append(avg_numbetterlist)
                    
                    
                    list_personmatch_best.append(avg_personmatch_best)
                    list_numbetterlist_best.append(avg_numbetterlist_best)
                    
    
                    list_simsameage_mean.append(avg_simsameage_mean)
                    list_simsameage_best.append(avg_simsameage_best)
                    list_simdiffage_mean.append(avg_simdiffage_mean)
                    list_simdiffage_best.append(avg_simdiffage_best)
                    
    
                    list_personmatch_sameage.append(avg_personmatch_sameage)
                    list_numbetterlist_sameage.append(avg_numbetterlist_sameage)
                    list_personmatch_diffage.append(avg_personmatch_diffage)
                    list_numbetterlist_diffage.append(avg_numbetterlist_diffage)



        
allresultdf = pd.DataFrame({'conmethod':conband,
                            'epochs':timesublist,
                            'age':agegroup,
                            'match':list_personmatch,
                            'match_best':list_personmatch_best,
                            'match_sameage':list_personmatch_sameage,
                            'match_diffage':list_personmatch_diffage,                          
                            })



percresultdf = pd.DataFrame({'conmethod':conband,
                             'epochs':timesublist,
                             'age':agegroup,
                             'percentile':list_numbetterlist,
                             'percentile_best':list_numbetterlist_best, 
                             'percentile_sameage':list_numbetterlist_sameage,
                             'percentile_diffage':list_numbetterlist_diffage,
                             })



summarydf = pd.DataFrame({'conmethod':conband,   
                          'epochs':timesublist,
                          'age':agegroup,
                          'stability':list_stability_mean,
                          'stability_best':list_stability_best,
                          'similarity':list_similarity_mean,
                          'similarity_best':list_similarity_best,
                          'simsameage':list_simsameage_mean,
                          'simsameage_best':list_simsameage_best,
                          'simdiffage':list_simdiffage_mean,
                          'simdiffage_best':list_simdiffage_best,
                          })




conlist = []
bandlist = []
for conbanditem in conband:
    sp = conbanditem.split('_')
    conmet = sp[0]
    band = sp[1]
    conlist.append(conmet)
    bandlist.append(band)


allallresultdf = pd.DataFrame({'conmethod':conband,
                            'con':conlist,
                            'band':bandlist,
                            'epochs':timesublist,
                            'age':agegroup,
                            'selfcompsavg':listselfcomps,
                            'othercompsavg':listothercomps,
                            'match':list_personmatch,
                            'match_best':list_personmatch_best,
                            'match_sameage':list_personmatch_sameage,
                            'match_diffage':list_personmatch_diffage,
                            'percentile':list_numbetterlist,
                            'percentile_best':list_numbetterlist_best,
                            'percentile_sameage':list_numbetterlist_sameage,
                            'percentile_diffage':list_numbetterlist_diffage,
                            'stability':list_stability_mean,
                            'stability_best':list_stability_best,
                            'similarity':list_similarity_mean,
                            'similarity_best':list_similarity_best,
                            'simsameage':list_simsameage_mean,
                            'simsameage_best':list_simsameage_best,
                            'simdiffage':list_simdiffage_mean,
                            'simdiffage_best':list_simdiffage_best,
                            })


print("")
print(allresultdf.to_string())
print(percresultdf.to_string())
print(summarydf.to_string())


if saveoutputs:
    allallresultdf.to_csv(savesumdir + 'fingerprintsummary.csv')



















